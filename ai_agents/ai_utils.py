import ast
import json
from typing import List, Dict
import html
import resources

def filter_by_threat_level(data: dict, threshold: int = 6) -> dict:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ —É—Ä–æ–≤–Ω—é —É–≥—Ä–æ–∑—ã (evaluation).
    –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ evaluation > threshold.

    :param data: –í—Ö–æ–¥–Ω–æ–π JSON-—Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ evaluation.
    :param threshold: –ü–æ—Ä–æ–≥ —É–≥—Ä–æ–∑—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6).
    :return: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.
    """
    return {
        key: value
        for key, value in data.items()
        if value.get("evaluation", 0) > threshold
    }

def parse_complaint_response(json_str):
    try:
        data = json.loads(json_str)
        state = data.get("state", "")
        complaints = data.get("complaints", [])
        return state, complaints
    except json.JSONDecodeError:
        return None, None

def format_medical_risk_from_any(text: str) -> str:
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ JSON
        data = json.loads(text)
    except json.JSONDecodeError:
        try:
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ Python-—Å–ª–æ–≤–∞—Ä—å
            data = ast.literal_eval(text)
        except (ValueError, SyntaxError):
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ JSON –∏–ª–∏ dict."

    if not isinstance(data, dict) or not data:
        # return "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º."
        return data
    _, value = next(iter(data.items()))
    if not isinstance(value, dict):
        return "‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω–∞."

    description = value.get("description", "‚Äî")
    # comment = value.get("comment", "‚Äî")

    return f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"

def extract_tests(agent_response: str):
    if isinstance(agent_response, str):
        try:
            data = json.loads(agent_response)
        except json.JSONDecodeError:
            raise ValueError("–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON")
    elif isinstance(agent_response, dict):
        data = agent_response
    else:
        raise TypeError("–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON –∏–ª–∏ dict")

    return data.get("tests", [])

def extract_recs(response_str: str):
        try:
            data = json.loads(response_str)

            risks: List[str] = data.get("risks", [])
            risks_text = "üî∫" + "\nüî∫".join(risks)
            recommendations: List[Dict[str, str]] = data.get("recommendations", [])
            if len(recommendations) > 3:
                recommendations = recommendations[:3]

            rec_text = ""
            for rec in recommendations:
                rec_text += "‚úÖ –∫–æ–º–ø–ª–µ–∫—Å "
                rec_text += bold_html(rec['test'])
                rec_text += bold_html(f" {resources.TESTS_PRICE[rec['test']]}‚ÇΩ")
                rec_text += " - "
                rec_text += rec['reason']
                rec_text += "\n"

            return bold_html(risks_text), recommendations, rec_text

        except json.JSONDecodeError:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –æ—Ç –∞–≥–µ–Ω—Ç–∞")

def bold_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è HTML –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ –≤ <b>...</b>
    """
    safe_text = html.escape(text)
    return f"<b>{safe_text}</b>"